(in-microtheory KRR-Winter2019FactsMt)

;;; Collections

(isa BikePart FirstOrderCollection)
(genls BikePart Device)
(comment BikePart "The collection of all bike parts.")

(isa PartCondition FirstOrderCollection)
(genls PartCondition DescriptionTypeByFocus)
(comment PartCondition "The collection of all part conditions.")

(isa ProblemResolution FirstOrderCollection)
(genls ProblemResolution SolutionStepEventType)
(comment ProblemResolution "The collection of all bike problem resolutions.")

;;; Facts

;;; Parts
(isa p1 BikePart)
(comment p1 "Rim: The rim is the outer edge of a wheel, on which the tire is fitted. Usually a rim is made out of metal and can be seen from the side of the wheel. Furthermore, the spokes are mounted at the rim and keep the rim in shape if a heavy object sits on the bike.")

(isa p2 BikePart)
(comment p2 "Pad: Pads are small objects which have a rough surface and are part of the braking system of the bike. The pads can be pushed onto the rim or the rotor of a disc braked bike in order to create friction to slow down the bike.")

;;; Conditions
(isa c7 PartCondition)
(comment c7 "Outdated: A part which is too old or that has been longer used than recommend.")

(isa c9 PartCondition)
(comment c9 "Misplaced: The part is incorrectly positioned or has a wrong orientation.")

;;; Resolutions
(isa r3 ProblemResolution)
(comment r3 "Toe in the brake pads.")

(isa r4 ProblemResolution)
(comment r4 "Replace with new pads.")

;;; This function should allow us to enter multiple symptoms
(isa SymptomFn VariableArityFunction)
(arity SymptomFn n-ary)
(resultIsa SymptomFn Entity)
(comment SymptomFn “A symptom that includes the given parts and conditions.”)

;;; Predicate type that relates symptoms to resolutions
(isa solvesProblem DirectBinaryPredicate)
(arity solvesProblem 2)
(arg1Isa solvesProblem Entity)
(arg2Isa solvesProblem ProblemResolution)
(comment solvesProblem "A relation indicating that the problem caused by the given symptom function can be solved by the given problem resolution.")

;;; Which resolution solves which symptoms / problems
(solvesProblem (SymptomFn c7 p2) r4)
(solvesProblem (SymptomFn c9 p1 c9 p2) r3)

;;; The query
(<== (solvesProblem ?symp ?res))

